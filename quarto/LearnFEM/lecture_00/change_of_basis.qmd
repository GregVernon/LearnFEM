---
jupyter: mkernel
---

```{matlab}
%| include: false
clear
setappdata(0, "MKernel_plot_backend", "inline")
setappdata(0, "MKernel_plot_format", "svg")
```

# Change of Basis

We previously presented various different basis polynomials.
Recall that an object within a given vector space is represented as a linear combination of basis vectors

```{=latex}
\begin{equation}
    \Vector{u} = \sum_{A}^{n}{\Vector{c_A} \Matrix{N}_A} = \Vector{c}_1 \Matrix{N}_1 + \Vector{c}_2 \Matrix{N}_2 + \cdots + \Vector{c}_{n-1} \Matrix{N}_{n-1} + \Vector{c}_n \Matrix{N}_n
\end{equation}
```

Sometimes, however, we may wish to represent this same object, exactly, in another basis:

```{=latex}
\begin{equation}
    \Vector{u} = \Vector{v} = \sum_{B}^{n}{\Vector{d}_B \Matrix{M}_B} = \Vector{d}_1 \Matrix{M}_1 + \Vector{d}_2 \Matrix{M}_2 + \cdots + \Vector{d}_{n-1} \Matrix{M}_{n-1} + \Vector{d}_n \Matrix{M}_n
\end{equation}
```

Leveraging the properties of the inner product we can solve for $\Vector{d}_B$, the unknown coefficients in this other basis:

```{=latex}
\begin{align}
    \Inner{\Matrix{M}_A}{\Vector{v}} &= \Inner{\Matrix{M}_A}{\Vector{u}} \\
    %
    \Inner{\Matrix{M}_A}{\sum_{B}^{n}{\Vector{d}_B \Matrix{M}_B}} &= \Inner{\Matrix{M}_A}{\sum_{B}^{n}{\Vector{c}_B \Matrix{M}_B}} \\
    %
    \sum_{A,B}^{n}\Vector{d}_B\Inner{\Matrix{M}_A}{\Matrix{M}_B} &= \sum_{A,B}^{n}\Vector{c}_B\Inner{\Matrix{M}_A}{\Matrix{M}_B} \\
\end{align}
```

Which we can write in matrix-vector format as

```{=latex}
\begin{equation}
    \begin{bmatrix}
        \Inner{\Matrix{M}_1}{\Matrix{M}_1} & \cdots & \Inner{\Matrix{M}_1}{\Matrix{M}_n} \\
        \vdots & \ddots & \vdots \\
        \Inner{\Matrix{M}_n}{\Matrix{M}_1} & \cdots & \Inner{\Matrix{M}_m}{\Matrix{M}_n}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{d}_1 \\ \vdots \\ \Vector{d}_n \end{bmatrix}
    =
    \begin{bmatrix}
        \Inner{\Matrix{M}_1}{\Matrix{N}_1} & \cdots & \Inner{\Matrix{M}_1}{\Matrix{N}_n} \\
        \vdots & \ddots & \vdots \\
        \Inner{\Matrix{M}_n}{\Matrix{N}_1} & \cdots & \Inner{\Matrix{M}_m}{\Matrix{N}_n}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{c}_1 \\ \vdots \\ \Vector{c}_n \end{bmatrix}
\end{equation}
```

Or, more compactly, as:

```{=latex}
\begin{align}
    \Matrix{D}\Vector{d} &= \Matrix{C}\Vector{c} \\
    \Vector{d} &= \Matrix{D}^{-1}\Matrix{C}\Vector{c}
\end{align}
```

Note that since the matrix-vector product $\Vector{d}=\Matrix{C}\Vector{c}$ is a vector we can recognize this as a linear system of equations, that is, it can be written as $\Matrix{A}\Vector{x}=\Vector{b}$, as $\Vector{x}=\Matrix{A}^{-1}\Vector{b}$, or $\Vector{d}=\Matrix{D}^{-1}\left(\Matrix{C}\Vector{c}\right)$.
Alternatively, we can evaluate the matrix-matrix product $\ChangeBasisOp{C}{D} = \Matrix{D}^{-1} \Matrix{C}$, which we call the *change of basis operator*, that we can store for reuse on multiple changes of basis

```{=latex}
\begin{equation}
    \Vector{d} = \ChangeBasisOp{C}{D} \Vector{c}
\end{equation}
```

## A useful mnemonic device

The mixing of different bases can be a bit confusing, so let's introduce a mnemonic that may help with remembering how to construct the change of basis system.
Recall that we want to change ***F***rom one basis ***T***o another basis.
Then we represent the above matrix-vector system in condensed form: the mnemonic device that we can more easily remember

```{=latex}
\begin{equation}
    \Inner{\Matrix{T}}{\Matrix{T}} \Vector{t} = \Inner{\Matrix{T}}{\Matrix{F}} \Vector{f}
\end{equation}
```

Which is read: 
```{=latex}
\begin{equation*}
    \mathit{To \ \mbox{-} \ To \ \mbox{-} \ to, \ equals, \ To \ \mbox{-} \ From \ \mbox{-} \ from}
\end{equation*}
```

And expands to:

```{=latex}
\begin{equation}
    \begin{bmatrix}
        \Inner{\Matrix{T}_1}{\Matrix{T}_1} & \cdots & \Inner{\Matrix{T}_1}{\Matrix{T}_n} \\
        \vdots & \ddots & \vdots \\
        \Inner{\Matrix{T}_n}{\Matrix{T}_1} & \cdots & \Inner{\Matrix{T}_m}{\Matrix{T}_n}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{t}_1 \\ \vdots \\ \Vector{t}_n \end{bmatrix}
    =
    \begin{bmatrix}
        \Inner{\Matrix{T}_1}{\Matrix{F}_1} & \cdots & \Inner{\Matrix{T}_1}{\Matrix{F}_n} \\
        \vdots & \ddots & \vdots \\
        \Inner{\Matrix{T}_n}{\Matrix{F}_1} & \cdots & \Inner{\Matrix{T}_m}{\Matrix{F}_n}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{f}_1 \\ \vdots \\ \Vector{f}_n \end{bmatrix}
\end{equation}
```

Let's now demonstrate on a few examples

## Example: Vector Change of Basis
Consider the vector $\vec{u} = (\frac{3}{2}, \frac{5}{4})$ in the standard basis $\Matrix{U} = [ (1, 0)^T, (0, 1)^T]$, and the target basis of $\Matrix{V} =[(1, 1/5)^T, (1/5, 4/5)^T]$.
What is the representation of $\vec{u}$ in $\Matrix{V}$?

Within our mnemonic, $\Matrix{T} \equiv \Matrix{V}$, $\Matrix{F} \equiv \Matrix{U}$, $\Vector{f} \equiv \vec{u}$, and the representation we wish to find is $\Vector{t} \equiv \vec{v}$.

```{=latex}
\begin{align}
    %%%%%%%%%%%%%
    %%% EQN 1 %%%
    %%%%%%%%%%%%%
    \Inner{\Matrix{V}}{\Matrix{V}} \vec{v} &= \Inner{\Matrix{V}}{\Matrix{U}} \vec{u} \\
    %%%%%%%%%%%%%
    %%% EQN 2 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix}
        \Inner{\Matrix{V}_1}{\Matrix{V}_1} & \Inner{\Matrix{V}_1}{\Matrix{V}_2} \\
        \Inner{\Matrix{V}_2}{\Matrix{V}_1} & \Inner{\Matrix{V}_2}{\Matrix{V}_2}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{\Matrix{V}_1}{\Matrix{U}_1} & \Inner{\Matrix{V}_1}{\Matrix{U}_2} \\
        \Inner{\Matrix{V}_2}{\Matrix{U}_1} & \Inner{\Matrix{V}_2}{\Matrix{U}_2}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{u}_1 \\ \Vector{u}_2 \end{bmatrix} \\
    %%%%%%%%%%%%%
    %%% EQN 3 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix}
        \Inner{\begin{pmatrix}  1 \\ \frac{1}{5} \end{pmatrix}}{\begin{pmatrix} 1 \\ \frac{1}{5} \end{pmatrix}} & \Inner{\begin{pmatrix}  1 \\ \frac{1}{5} \end{pmatrix}}{\begin{pmatrix} \frac{1}{5} \\ \frac{4}{5} \end{pmatrix}} \\
        \Inner{\begin{pmatrix} \frac{1}{5} \\ \frac{4}{5} \end{pmatrix}}{\begin{pmatrix} 1 \\ \frac{1}{5} \end{pmatrix}} & \Inner{\begin{pmatrix} \frac{1}{5} \\ \frac{4}{5} \end{pmatrix}}{\begin{pmatrix} \frac{1}{5} \\ \frac{4}{5} \end{pmatrix}}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{\begin{pmatrix}  1 \\ \frac{1}{5} \end{pmatrix}}{\begin{pmatrix} 1 \\ 0 \end{pmatrix}} & \Inner{\begin{pmatrix}  1 \\ \frac{1}{5} \end{pmatrix}}{\begin{pmatrix} 0 \\ 1 \end{pmatrix}} \\
        \Inner{\begin{pmatrix} \frac{1}{5} \\ \frac{4}{5} \end{pmatrix}}{\begin{pmatrix} 1 \\ 0 \end{pmatrix}} & \Inner{\begin{pmatrix} \frac{1}{5} \\ \frac{4}{5} \end{pmatrix}}{\begin{pmatrix} 0 \\ 1 \end{pmatrix}}
    \end{bmatrix}
    %
    \begin{bmatrix} \frac{3}{2} \\ \frac{5}{4} \end{bmatrix} \\
    %%%%%%%%%%%%%
    %%% EQN 4 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix}
        \frac{26}{25} & \frac{9}{25} \\
        \frac{9}{25}  & \frac{17}{25}
    \end{bmatrix}
    %
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    \begin{bmatrix}
        1           & \frac{1}{5} \\
        \frac{1}{5} & \frac{4}{5}
    \end{bmatrix}
    %
    \begin{bmatrix} \frac{3}{2} \\ \frac{5}{4} \end{bmatrix} \\
    %%%%%%%%%%%%%
    %%% EQN 5 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    \left( \begin{bmatrix}
               \frac{26}{25} & \frac{9}{25} \\
               \frac{9}{25}  & \frac{17}{25}
           \end{bmatrix}
    \right)^{-1}
    %
    \begin{bmatrix}
        1           & \frac{1}{5} \\
        \frac{1}{5} & \frac{4}{5}
    \end{bmatrix}
    %
    \begin{bmatrix} \frac{3}{2} \\ \frac{5}{4} \end{bmatrix} \\
    %%%%%%%%%%%%%
    %%% EQN 6 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    \begin{bmatrix}
        \frac{425}{361}  & \frac{-225}{361} \\
        \frac{-225}{361} & \frac{650}{361}  \\
    \end{bmatrix}
    %
    \begin{bmatrix}
        1           & \frac{1}{5} \\
        \frac{1}{5} & \frac{4}{5}
    \end{bmatrix}
    %
    \begin{bmatrix} \frac{3}{2} \\ \frac{5}{4} \end{bmatrix} \\
    %%%%%%%%%%%%%
    %%% EQN 7 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    \begin{bmatrix}
        \frac{20}{19} & \frac{-5}{19} \\
        \frac{5}{19} & \frac{25}{19} \\
    \end{bmatrix}
    %
    \begin{bmatrix} \frac{3}{2} \\ \frac{5}{4} \end{bmatrix} \\
    %%%%%%%%%%%%%
    %%% EQN 8 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix} \Vector{v}_1 \\ \Vector{v}_2 \end{bmatrix}
    &=
    %
    \begin{bmatrix} \frac{5}{4} \\ \frac{5}{4} \end{bmatrix} \\
\end{align}
```

We can write a routine for computing the change of basis between two vectors

```{matlab}
%| output: false
function [to_coeffs, R] = VectorChangeOfBasis( from_basis, to_basis, from_coeffs )
    basis_dimension = length( from_coeffs )
    D = sym( zeros( basis_dimension ) );
    C = sym( zeros( basis_dimension ) );
    for ii = 1 : basis_dimension
        for jj = 1 : basis_dimension
            D(ii,jj) = dot( to_basis(:,ii), to_basis(:, jj) );
            C(ii,jj) = dot( to_basis(:,ii), from_basis(:,jj) );
        end
    end
    R = D \ C;
    to_coeffs = R * from_coeffs;
end
```

Which we can use to evaluate the example in this section

```{matlab}
%| output: false
U =sym( [ [1; 0],   [0; 1] ] );
V =sym( [ [1; 1/5], [1/5; 4/5] ] );
u =sym( [3/2; 5/4] );
[v, R] = VectorChangeOfBasis( U, V, u );
```

```{=latex}
\begin{equation*}
    \Matrix{R} = 
    \begin{bmatrix}
        \frac{20}{19} & \frac{-5}{19} \\
        \frac{-5}{19} & \frac{25}{19}
    \end{bmatrix}
\end{equation*}
```

```{=latex}
\begin{equation*}
    v = 
    \begin{bmatrix}
        \frac{5}{4} \\
        \frac{5}{4}
    \end{bmatrix}
\end{equation*}
```

```{matlab}
%| echo: false
u_vec = U * u
v_vec = V * v


fig = figure;
ax = gca;
cmap = colormap( "lines" );
hold on
axis equal
grid on
ax.XLim = [-0.25, 1.75];
ax.YLim = [-0.25, 1.50];
ax.XTick = [-0.25 : .25 : 1.75];
ax.YTick = [-0.25 : .25 : 1.50];
ax.FontSize = 12;

vector_color = cmap(1,:);
vector_color_hsl = colorspace( 'RGB->HSL', vector_color );
basis_color = colorspace( 'HSL->RGB', [vector_color_hsl(1:2), vector_color_hsl(3) + (1 - vector_color_hsl(3) )/4 ] );
scaled_basis_color = colorspace( 'HSL->RGB', [vector_color_hsl(1:2), vector_color_hsl(3) + 2*(1 - vector_color_hsl(3) )/4 ] );

p{1} = arrows( 0, 0, double( U(1,1) * u(1) ), double( U(2,1) * u(1) ), [.05 .05 .0375 .0125], 'Cartesian', 'LineWidth', 1, 'FaceColor', scaled_basis_color, 'FaceAlpha',0.25, 'EdgeColor', cmap(1,:) );
p{2} = arrows( 0, 0, double( U(1,2) * u(2) ), double( U(2,2) * u(2) ), [.05 .05 .0375 .0125], 'Cartesian', 'LineWidth', 1, 'FaceColor', scaled_basis_color, 'FaceAlpha',0.25, 'EdgeColor', cmap(1,:) );
p{3} = plot( [ U(1,1) * u(1), u_vec(1) ], [U(2,1) * u(1), u_vec(2) ], LineWidth=2, LineStyle=":", Color=vector_color );
p{4} = plot( [ U(1,2) * u(2), u_vec(1) ], [U(2,2) * u(2), u_vec(2) ], LineWidth=2, LineStyle=":", Color=vector_color );
p{5} = arrows( 0, 0, double( U(1,1) ), double( U(2,1) ), [.1 .1 .075 .035], 'Cartesian', 'LineWidth', 1, 'FaceColor', basis_color, 'FaceAlpha',1, 'EdgeColor', "k" );
p{6} = arrows( 0, 0, double( U(1,2) ), double( U(2,2) ), [.1 .1 .075 .035], 'Cartesian', 'LineWidth', 1, 'FaceColor', basis_color, 'FaceAlpha',1, 'EdgeColor', "k" );
p{7} = arrows( 0, 0, double( u_vec(1) ), double( u_vec(2) ), [.05 .05 .0375 .0125], 'Cartesian', 'LineWidth', 1, 'FaceColor', vector_color, 'EdgeColor', "k" );

vector_color = cmap(2,:);
vector_color_hsl = colorspace( 'RGB->HSL', vector_color );
basis_color = colorspace( 'HSL->RGB', [vector_color_hsl(1:2), vector_color_hsl(3) + (1 - vector_color_hsl(3) )/4 ] );
scaled_basis_color = colorspace( 'HSL->RGB', [vector_color_hsl(1:2), vector_color_hsl(3) + 2*(1 - vector_color_hsl(3) )/4 ] );

p{8}  = arrows( 0, 0, double( V(1,1) * v(1) ), double( V(2,1) * v(1) ), [.05 .05 .0375 .0125], 'Cartesian', 'LineWidth', 1, 'FaceColor', scaled_basis_color, 'FaceAlpha',0.25, 'EdgeColor', cmap(2,:) );
p{9}  = arrows( 0, 0, double( V(1,2) * v(2) ), double( V(2,2) * v(2) ), [.05 .05 .0375 .0125], 'Cartesian', 'LineWidth', 1, 'FaceColor', scaled_basis_color, 'FaceAlpha',0.25, 'EdgeColor', cmap(2,:) );
p{10} = plot( [ V(1,1) * v(1), v_vec(1) ], [V(2,1) * v(1), v_vec(2) ], LineWidth=2, LineStyle=":", Color=vector_color );
p{11} = plot( [ V(1,2) * v(2), v_vec(1) ], [V(2,2) * v(2), v_vec(2) ], LineWidth=2, LineStyle=":", Color=vector_color );
p{12} = arrows( 0, 0, double( V(1,1) ), double( V(2,1) ), [.1 .1 .075 .035], 'Cartesian', 'LineWidth', 1, 'FaceColor', basis_color, 'FaceAlpha',1, 'EdgeColor', "k" );
p{13} = arrows( 0, 0, double( V(1,2) ), double( V(2,2) ), [.1 .1 .075 .035], 'Cartesian', 'LineWidth', 1, 'FaceColor', basis_color, 'FaceAlpha',1, 'EdgeColor', "k" );
p{14} = arrows( 0, 0, double( v_vec(1) ), double( v_vec(2) ), [.05 .05 .0375 .0125], 'Cartesian', 'LineWidth', 1, 'FaceColor', vector_color, 'EdgeColor', "k" );
```

## Example: Polynomial Change of Basis

Consider the polynomial $p(x) = -x^4 + 4x^2 + x - 1$.
Recognize it can be equivalently written in the monomial basis as $p(x) = -1M_0 + 1M_1 + 4M_2 + 0M_3 - 1M_4$.
We wish to represent this polynomial in the Lagrange basis.

Within our mnemonic, $\Matrix{T} \equiv \Matrix{M}$, $\Matrix{F} \equiv \Matrix{L}$, $\Vector{f} \equiv \Vector{m}$, and the representation we wish to find is $\Vector{t} \equiv \Vector{\ell}$.


```{matlab}
%| output: false
function [to_coeffs, R] = PolynomialChangeOfBasis( from_basis, to_basis, from_coeffs, domain )
    basis_dim = length( from_coeffs );
    variate = symvar( from_basis(end) );
    if isempty( variate )
        variate = sym( "x", "real" );
    end
    D = int( to_basis * transpose( to_basis ), domain );
    C = int( to_basis * transpose( from_basis ), domain );
    R = D \ C;
    to_coeffs = R * from_coeffs;
end
```

```{matlab}
x = sym( "x", "real" );
domain = sym( [ 0, 1 ] );
m_coeffs = sym( [-1; 1; 4; 0; -1] );
M = PolynomialBasisFunction( "Monomial", 4, x, domain );
L = PolynomialBasisFunction( "Lagrange", 4, x, domain );
[l_coeffs, R] = PolynomialChangeOfBasis( M, L, m_coeffs, domain );
display( l_coeffs )
display( R )
```