---
jupyter: mkernel
---

```{matlab}
%| include: false
clear
setappdata(0, "MKernel_plot_backend", "inline")
setappdata(0, "MKernel_plot_format", "svg")
addpath( "../lecture_00/" )
```

# Incorporating Boundary Conditions in Galerkin's Method

We previously showed the Galerkin method as being *the best* approximation of a function over a domain, which implies that there are *other* approximations of the function.
We also observed that, because the approximation is merely trying to minimize the $L^2$ error over the entire domain, that there is no guarantee that it is the best approximation of the function at any arbitrary point.
Indeed, for the approximation to be the "best approximation" of the function at any arbitrary point, it would have to be the best approximation at every point -- the approximation would need to be equivalent to the target function.

But what if we only care about being the best approximation of the function at a few points, for example: at the boundaries of the domain?
While this might itself seem arbitrary, consider that in real-world applications we often know the conditions at physical boundaries -- either through direct measurement or intuition.
For example, we might directly measure the temperature of a device using thermal imaging or thermocouples, which measure temperature at the boundary of an object.
Or we might safely assume that a long beam that is welded to a much stiffer object has zero displacement at the shared interface.
Because these conditions are often applied on boundaries, they are historically called *boundary conditions*.

We modify the Galerkin statement function from the previous section to include this desire to produce the best approximation of the function at its boundaries.

```{=latex}
\begin{equation}
    \begin{alignedat}{2}
        &\textrm{Given:}      & \quad g(x) &= \sin(\pi x)^2 + \cos(x) - 1 \\
        &\textrm{Find:}       & \quad \tilde{g}(x) &\in \tilde{\mathcal{V}} \\
        &\textrm{such that:}  & \quad \Inner{\tilde{\mathcal{V}}}{\tilde{g}(x)} &= \Inner{\tilde{\mathcal{V}}}{g(x)} \\
        &\textrm{subject to:} & \quad \tilde{g}(0) &= g(0) \\
        &                     & \quad \tilde{g}(1) &= g(1) \\
    \end{alignedat}
\end{equation}
```

We need to determine how to enforce our boundary conditions; it's not immediately clear how we could enforce the boundary conditions in general.
But let's consider these under our change of basis perspective: we want to represent $g(0)$ and $g(1)$ in our finite basis:

```{=latex}
\begin{align}
    %%%%%%%%%%%%%
    %%% EQN 1 %%%
    %%%%%%%%%%%%%
    \Inner{\Matrix{T}}{\Matrix{T}} \Vector{t} &= \Inner{\Matrix{T}}{\Matrix{F}} \Vector{f} \\
    %%%%%%%%%%%%%
    %%% EQN 2 %%%
    %%%%%%%%%%%%%
    \begin{bmatrix}
        \Inner{\Matrix{T}_1}{\Matrix{T}_1} & \cdots & \Inner{\Matrix{T}_1}{\Matrix{T}_n} \\
        \vdots & \ddots & \vdots \\
        \Inner{\Matrix{T}_n}{\Matrix{T}_1} & \cdots & \Inner{\Matrix{T}_m}{\Matrix{T}_n}
    \end{bmatrix}\
    \begin{bmatrix}
        t_0 \\ \vdots \\ t_n
    \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{\Matrix{T}_1}{g(0)} \\
        \vdots \\
        \Inner{\Matrix{T}_m}{g(0)}
    \end{bmatrix}
\end{align}
```

Where the "To"-basis is our chosen polynomial basis, $\Matrix{M}$, *evaluated* at the boundary condition, which we can represent using the Dirac delta function:

```{=latex}
\begin{equation}
    T_{\Index{i}} = \Inner{M_{\Index{i}}}{\DiracDelta{x}{0}}
\end{equation}
```

For simplicity, we introduce the notation $\DiracDeltaShort{x}{a}$ as shorthand for $\DiracDelta{x}{a}$

```{=latex}
\begin{equation}
    T_{\Index{i}} = \Inner{M_{\Index{i}}}{\DiracDeltaShort{x}{0}}
\end{equation}
```

and $

And thus the boundary condition at $x=0$ can be written as

<!-- ```{=latex}
\begin{align*}
    \begin{bmatrix} 
        \Inner{T_{\Index{i}}}{T_{\Index{j}}}
    \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{0}}}
    \end{bmatrix} \\
    %%%%%%
    \begin{bmatrix} 
        \Inner{T_{\Index{i}}}{g(0)}
    \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{0}} }{ g(0) }
    \end{bmatrix}
\end{align*}
``` -->

```{=latex}
\begin{equation}
    \begin{split}
        \begin{bmatrix}
            \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} } & \cdots & \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{0}} } \\
            \vdots & \ddots & \vdots \\
            \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} } & \cdots & \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{0}} }
        \end{bmatrix}
        \begin{bmatrix}
            t_0 \\ \vdots \\ t_{\Index{n}}
        \end{bmatrix}
        =
        \begin{bmatrix}
            \Inner{ \Inner{M_1}{\DiracDeltaShort{x}{0}} }{g(0)} \\
            \vdots \\
            \Inner{ \Inner{M_{\Index{m}}}{\DiracDeltaShort{x}{0}} }{g(0)}
        \end{bmatrix}
    \end{split}
\end{equation}
```

Similarly, the boundary condition at $x=1$ can be written as

<!-- ```{=latex}
\begin{align*}
    \begin{bmatrix} 
        \Inner{T_{\Index{i}}}{T_{\Index{j}}}
    \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{ \Inner{ M_{\Index{i}} }{\DiracDelta{x}{1}} }{ \Inner{ M_{\Index{j}} }{\DiracDelta{x}{1}}}
    \end{bmatrix} \\
    %%%%%%
    \begin{bmatrix} 
        \Inner{T_{\Index{i}}}{g(1)}
    \end{bmatrix}
    &=
    \begin{bmatrix}
        \Inner{ \Inner{ M_{\Index{i}} }{\DiracDelta{x}{1}} }{ g(1) }
    \end{bmatrix}
\end{align*}
``` -->

```{=latex}
\begin{equation}
    \begin{split}
        \begin{bmatrix}
            \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} } & \cdots & \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{1}} } \\
            \vdots & \ddots & \vdots \\
            \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} } & \cdots & \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{1}} }
        \end{bmatrix}
        \begin{bmatrix}
            t_0 \\ \vdots \\ t_{\Index{n}}
        \end{bmatrix}
        =
        \begin{bmatrix}
            \Inner{ \Inner{M_1}{\DiracDeltaShort{x}{1}} }{g(1)} \\
            \vdots \\
            \Inner{ \Inner{M_{\Index{m}}}{\DiracDeltaShort{x}{1}} }{g(1)}
        \end{bmatrix}
    \end{split}
\end{equation}
```

And we recall that from the change of basis we have

```{=latex}
\begin{equation}
    \begin{bmatrix}
        \Inner{M_1}{M_1} & \cdots & \Inner{M_1}{M_{\Index{n}}} \\
        \vdots           & \ddots & \vdots \\
        \Inner{M_{\Index{m}}}{M_1} & \cdots & \Inner{M_{\Index{m}}}{M_{\Index{n}}}
    \end{bmatrix}
    \begin{bmatrix}
        t_0 \\ \vdots \\ t_{\Index{n}}
    \end{bmatrix}
    =
    \begin{bmatrix}
        \Inner{M_1}{g(x)} \\
        \vdots \\
        \Inner{M_{\Index{m}}}{g(x)}
    \end{bmatrix}
\end{equation}
```

Thus we have three sets of equations:

```{=latex}
\begin{align}
    \begin{bmatrix} \Inner{ M_{\Index{i}} }{ M_{\Index{j}} } \end{bmatrix} \Vector{t} &= \begin{bmatrix} \Inner{ M_{\Index{j}} }{ g(x) } \end{bmatrix} \\
    %
    \begin{bmatrix} \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{0}} } \end{bmatrix} \Vector{t} &= \begin{bmatrix} \Inner{M_{\Index{j}}}{g(0)} \end{bmatrix} \\
    %
    \begin{bmatrix} \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{1}} } \end{bmatrix} \Vector{t} &= \begin{bmatrix} \Inner{M_{\Index{j}}}{g(1)} \end{bmatrix} \\
\end{align}
```

Which we can assemble into a single equation:

```{=latex}
\begin{equation}
    \begin{bmatrix} \Inner{M_{\Index{i}}}{M_{\Index{j}}} \end{bmatrix} \Vector{t} 
    + 
    \begin{bmatrix} \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{0}} } \end{bmatrix} \Vector{t} 
    +
    \begin{bmatrix} \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{1}} } \end{bmatrix} \Vector{t}
    = 
    \begin{bmatrix} \Inner{M_{\Index{i}}}{g(x)} \end{bmatrix} 
    +
    \begin{bmatrix} \Inner{ \Inner{M_{\Index{i}}}{\DiracDeltaShort{x}{0}} }{g(0)} \end{bmatrix}
    +
    \begin{bmatrix} \Inner{ \Inner{M_{\Index{i}}}{\DiracDeltaShort{x}{1}} }{g(1)} \end{bmatrix}
\end{equation}
```

which simplifies to

```{=latex}
\begin{equation}
    \left(
        \begin{bmatrix} \Inner{M_{\Index{i}}}{M_{\Index{j}}} \end{bmatrix} 
        + 
        \begin{bmatrix} \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{0}} } \end{bmatrix}
        +
        \begin{bmatrix} \Inner{ \Inner{ M_{\Index{i}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{j}} }{\DiracDeltaShort{x}{1}} } \end{bmatrix} 
    \right)
    \Vector{t}
    = 
    \left(
        \begin{bmatrix} \Inner{M_{\Index{i}}}{g(x)} \end{bmatrix} 
        +
        \begin{bmatrix} \Inner{ \Inner{M_{\Index{i}}}{\DiracDeltaShort{x}{0}} }{g(0)} \end{bmatrix}
        +
        \begin{bmatrix} \Inner{ \Inner{M_{\Index{i}}}{\DiracDeltaShort{x}{1}} }{g(1)} \end{bmatrix}
    \right)
\end{equation}
```

or, in expanded matrix form

```{=latex}
\begin{equation}
    \begin{bmatrix}
        \Inner{M_{\Index{1}}}{M_{\Index{1}}} + \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} } + \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} } & \cdots & \Inner{M_{\Index{1}}}{M_{\Index{n}}} + \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{0}} } + \Inner{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{1}} }\\
        \vdots & \ddots & \vdots \\
        \Inner{M_{\Index{m}}}{M_{\Index{1}}} + \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{0}} } + \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{1}} }{\DiracDeltaShort{x}{1}} } & \cdots & \Inner{M_{\Index{m}}}{M_{\Index{n}}} + \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{0}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{0}} } + \Inner{ \Inner{ M_{\Index{m}} }{\DiracDeltaShort{x}{1}} }{ \Inner{ M_{\Index{n}} }{\DiracDeltaShort{x}{1}} }\\
    \end{bmatrix}
    \begin{bmatrix}
        t_1 \\ \vdots \\ t_\Index{n}
    \end{bmatrix}
    =
    \begin{bmatrix}
        \Inner{M_{\Index{1}}}{g(x)} + \Inner{ \Inner{M_{\Index{1}}}{\DiracDeltaShort{x}{0}} }{g(0)} + \Inner{ \Inner{M_{\Index{1}}}{\DiracDeltaShort{x}{1}} }{g(1)} \\
        \vdots \\
        \Inner{M_{\Index{m}}}{g(x)} + \Inner{ \Inner{M_{\Index{m}}}{\DiracDeltaShort{x}{0}} }{g(0)} + \Inner{ \Inner{M_{\Index{m}}}{\DiracDeltaShort{x}{1}} }{g(1)} \\
    \end{bmatrix}
\end{equation}
```

We can modify our original `ScalarProjection` function to support these boundary conditions

```{matlab}
%| output: false
function [u, D, F, basis, d] = ScalarProjection( target_fun, basis_name, degree, domain )

    function D = AssembleGramMatrix()
        D = int( basis * transpose( basis ), domain );
    end

    function F = AssembleForceVector()
        F = int( basis * target_fun, domain );
    end

    function [D, F] = ApplyBoundaryConditions( D, F )
        function [D, F] = LeftFunctionValue( D, F )
            D = D + int( dirac( variate - domain(1) ) * ( basis .* transpose( basis ) ), [-inf, inf] );
            F = F + int( ( dirac( variate - domain(1) ) * basis ) * ( dirac( variate - domain(1) ) * target_fun ), [-inf, inf] );
        end
        function [D, F] = RightFunctionValue( D, F )
            D = D + int( dirac( variate - domain(2) ) * ( basis .* transpose( basis ) ), [-inf, inf] );
            F = F + int( basis * ( dirac( variate - domain(2) ) * target_fun ), [-inf, inf] );
        end
        [D, F] = LeftFunctionValue( D, F );
        [D, F] = RightFunctionValue( D, F );
    end

    variate = symvar( target_fun );
    if isempty( variate )
        variate = sym( "x", "real" );
    end
    basis = PolynomialBasisFunction( basis_name, degree, variate, domain );
    D = AssembleGramMatrix();
    F = AssembleForceVector();
    [D, F] = ApplyBoundaryConditions( D, F );
    d = D \ F;
    u = transpose( d ) * basis;
end
```

```{matlab}
x = sym( "x", "real" );
domain = sym( [0, 1] );
target_fun = sin( pi * x )^2 + cos( x ) - 1;
domain = sym( [0, 1] );
degree = 2;
basis_name = "Monomial";

[u, M, F, basis, d] = ScalarProjection( target_fun, basis_name, degree, domain );
```

```{matlab}
%| echo: false
figure
hold on
fplot( target_fun, double( domain ), linewidth=4, DisplayName="$f(x)$" )
fplot( u, double( domain ),          linewidth=3, DisplayName="$\tilde{f}(x)$" )
legend()
```