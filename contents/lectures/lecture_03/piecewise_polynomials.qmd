---
jupyter: mkernel
---

```{matlab}
%| include: false
clear
setappdata(0, "MKernel_plot_backend", "inline")
setappdata(0, "MKernel_plot_format", "svg")
addpath( "../lecture_00/" )
addpath( "../lecture_01/" )
addpath( "../lecture_02/" )
```

# Piecewise Polynomials

In the previous lecture we showed that polynomials, while they are able to accurately represent a wide range of partial differential equations, they have several critical flaws:

1. It can be difficult to predict what polynomial degree will be necessary to accurately approximate a given boundary value problem's solution.
2. The more oscillations a solution has, the less efficiently it is approximated by polynomials, requiring ever increasing polynomial degree to approximate.
3. Using high-order polynomials in the Galerkin method increases the condition number of the resulting linear system of equations. This can result in numerically-singular systems that necessitate slower symbolic or variable-precision arithmetic in their solution.
One solution to these issues is to use multiple, relatively low-order polynomial "pieces" as the basis rather than a single monolithic polynomial.
These *piecewise-polynomials*, also known as *splines*, are the foundation of modern numerical methods such as the finite element and *finite volume* methods, although this fact is perhaps not widely understood by many practitioners.


```{matlab}
%| output: false
%| echo: false
function l2_error = ComputeL2Error( target_fun, approx_fun, domain, method )
    if method == "exact"
        if symFunType( approx_fun ) == "piecewise"
            l2_error = sym(0);
            fc = GetPiecewiseSolutionComponents( approx_fun );
            for ii = 1 : length( fc.functions )
                l2_error_fun = simplify( ( target_fun - fc.functions{ii} )^2, Steps=10 );
                l2_error = l2_error + sqrt( int( l2_error_fun, fc.domains(ii,:) ) );
            end
        else
            l2_error_fun = simplify( ( target_fun - approx_fun )^2, Steps=10 );
            l2_error = sqrt( int( l2_error_fun, domain ) );
        end
    elseif method == "fast"
        if symFunType( approx_fun ) == "piecewise"
            l2_error = sym(0);
            fc = GetPiecewiseSolutionComponents( approx_fun );
            for ii = 1 : length( fc.functions )
                l2_error_fun = simplify( ( target_fun - fc.functions{ii} )^2, Steps=10 );
                l2_error_fun = matlabFunction( l2_error_fun );
                l2_error_fun_vpa = @(x) double( vpa( l2_error_fun(x), 32 ) );
                domain = double( fc.domains(ii,:) );
                l2_error = l2_error + sqrt( integral( l2_error_fun_vpa, domain(1), domain(2), reltol=1e-12 ) );
            end
        else
            l2_error_fun = simplify( ( target_fun - approx_fun )^2, Steps=10 );
            l2_error_fun = matlabFunction( l2_error_fun );
            l2_error_fun_vpa = @(x) double( vpa( l2_error_fun(x), 32 ) );
            domain = double( domain );
            l2_error = sqrt( integral( l2_error_fun_vpa, domain(1), domain(2), reltol=1e-12 ) );
        end
    end
end
```
