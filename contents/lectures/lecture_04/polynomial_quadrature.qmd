---
jupyter: mkernel
---

```{matlab}
%| include: false
clear
setappdata(0, "MKernel_plot_backend", "inline")
setappdata(0, "MKernel_plot_format", "svg")
addpath( "../lecture_00/" )
addpath( "../lecture_01/" )
```

# Polynomial Quadrature

We've previously discussed using polynomials to approximate all kinds of functions, especially via Galerkin's method to produce a best-fit approximation.
While the function we wish to integrate may be difficult to integrate by hand, integration of polynomials is easy.
Thus one extremely effective overall strategy for approximately integrating functions is to produce a suitable polynomial approximation to the function and then integrate the polynomial.
As a best-fit approximation via Galerkin's method would require the use of integration in the inner product calculations, a "chicken or the egg" paradox, we won't be able to use this kind of approximation technique.
However, we can make use of the interpolation property of certain basis polynomials to produce an interpolatory approximation to the target function without needed to perform integration -- we simply need to be able to evaluate the target function.
Because of the simplicity and, as we'll show, the accuracy and efficiency of this approach, *quadrature from polynomial interpolation* is perhaps the most commonly used approach for numerical integration today.

## Quadrature from polynomial interpolation

Regarding the integration of polynomials, recall that a simple antiderivative rule exists for each monomial term:

```{=latex}
\begin{equation*}
    \int{ x^n}{\d{x}} = \frac{x^{n+1}}{n + 1}
\end{equation*}
```

as well as simple rules derived from the linearity properties of integration:

```{=latex}
\begin{align}
    \int{ a f(x) } \d{x} &= a \int{ f(x) }{ \d{x} } \\
    \int{ f(x) + g(x) } \d{x} &= \int{ f(x) }{ \d{x} } + \int{ g(x) }{ \d{x} }
\end{align}
```

Thus we can easily integrate a polynomial:

```{=latex}
\begin{align*}
    \int{ a x^m + b x^n }{\d{x}} &= \int{ a x^m }{ \d{x} } + \int{ b x^n }{ \d{x} } \\
                                 &= a \int{ x^m }{ \d{x} } + b \int{ x^n }{ \d{x} } \\
                                 &= a \frac{x^{m+1}}{m+1}  + b \frac{x^{n+1}}{n+1} \\
\end{align*}
```

Consider then, that it's an almost trivial exercise to compile tables of the definite integrals for a polynomial basis.
For example, the Lagrange basis over the biunit domain ($[-1, 1]$):

```{matlab}
%| echo: false
%| output: false
clear
x = sym( "x", "real" );
domain = sym( [-1, 1] );

for degree = 0 : 8;
    L = PolynomialBasisFunction( "Lagrange", degree, x, domain );
    display( int( L, domain ) );
end
```

| Basis Function | $\int_{-1}^{1}L^0(x)$ |    $\int_{-1}^{1}L^1(x)$   |    $\int_{-1}^{1}L^2(x)$   |    $\int_{-1}^{1}L^3(x)$   |    $\int_{-1}^{1}L^4(x)$   |
|:--------------:|:---------------------:|:--------------------------:|:--------------------------:|:--------------------------:|:--------------------------:|
|        1       |            2          |             $1$            |         $\frac{1}{3}$      |        $\frac{1}{4}$       |       $\frac{7}{45}$       |
|        2       |                       |             $1$            |         $\frac{4}{3}$      |        $\frac{3}{4}$       |       $\frac{32}{45}$      |
|        3       |                       |                            |         $\frac{1}{3}$      |        $\frac{3}{4}$       |       $\frac{12}{45}$      |
|        4       |                       |                            |                            |        $\frac{1}{4}$       |       $\frac{32}{45}$      |
|        5       |                       |                            |                            |                            |       $\frac{7}{45}$       |

: Definite integrals of the Lagrange basis of degrees 0-4

As mentioned earlier, the Lagrange polynomial basis has what is known as the interpolatory property, meaning that there exist nodes for which all but one basis function are zero and the one non-zero function has a value of one.
What this means is that at their respective node each basis function interpolates the polynomial represented within the basis.
Thus we can easily construct a *Lagrange polynomial* that interpolates our target function and then integrate the Lagrange polynomial.
Note that the interpolating Lagrange polynomial **will not** be the best approximation of the target function, but it is close enough for quadrature to be accurate.

Consider the following example:

```{=latex}
\begin{equation}
    f(x) = \sin( x )
\end{equation}
```

| Basis Function | $x_i$          |      $f(x_i)$     |    $\int_{-1}^{1}L_i^2(x)$   |   $f(x_i) \cdot \int_{-1}^{1}L_i^2(x)$   |
|:--------------:|:--------------:|:-----------------:|:----------------------------:|:----------------------------------------:|
|       $1$      | $-1$           | $0.8414\tilde{7}$ |          $\frac{1}{8}$       |               $0.2103\tilde{7}$          |
|       $2$      | $-\frac{1}{3}$ | $0.1108\tilde{8}$ |          $\frac{3}{8}$       |               $0.0831\tilde{6}$                       |
|       $3$      | $\frac{1}{3}$  | $0.1108\tilde{8}$ |          $\frac{3}{8}$       |               $0.0831\tilde{6}$          |
|       $4$      | $1$            | $0.8414\tilde{7}$ |          $\frac{1}{8}$       |               $0.2103\tilde{7}$          |
|       ---      |   ---          |     ---           |           **TOTAL:**         |               $0.5870\tilde{6}$          |
|       ---      |   ---          |     ---           |           **EXACT:**         |               $0.6205\tilde{4}$          |


```{matlab}
%| echo: false
%| output: true
clear
x = sym( "x", "real" );
%target_fun(x) = sin( x.^2 );
target_fun(x) = real( x.^x );
domain = sym( [-1, 1] );
degree = 4;

L = PolynomialBasisFunction( "Lagrange", degree, x, domain );
nodes = transpose( linspace( domain(1), domain(2), degree + 1 ) );
l_coeffs = target_fun( nodes );

figure
hold on
fplot( target_fun, double( domain ), LineWidth=4, Color="k" )
fplot( transpose( l_coeffs ) * L, double( domain ), LineWidth=2, SeriesIndex=1, MeshDensity=20*degree )
xline( double( nodes ), LineStyle="-" )
scatter( nodes, target_fun( nodes ), MarkerFaceColor="k", MarkerEdgeColor="k" );
axis padded
ax(1) = gca;
ax(1).XAxisLocation = "origin";
ax(1).YAxisLocation = "origin";

figure
for ii = 1 : length( L )
    subplot( 3, 2, ii )
    hold on
    fplot( l_coeffs(ii) * L(ii), double( domain ), LineWidth=2, SeriesIndex=ii+1, MeshDensity=20*degree )
    xline( double( nodes(ii) ), LineStyle="-" )
    scatter( double( nodes(ii) ), target_fun( nodes(ii) ), SeriesIndex=ii+1, MarkerFaceColor="flat", MarkerEdgeColor="k" );
    axis padded
    ax(ii+1) = gca;
    ax(ii+1).XAxisLocation = "origin";
    ax(ii+1).YLim = ax(1).YLim;
end
%format long
%double( transpose( l_coeffs ) * int( L, domain ) )
%double( vpa( int( target_fun, domain ), 16 ) )
```

As we see, the approximate integral computed via quadrature of the interpolating Lagrange polynomial is a reasonably accurate approximation of the target function's integral with only four function evaluations.
As a final note to this introduction, it might not be clear that this approach is still *quadrature* -- what happened to the rectangles?
The rectangles are still "there", in that we are still multiplying two scalars, the function value serving as the rectangle height and the Lagrange basis functions' integrals as the width, thus the terminology of quadrature is still valid.

```{matlab}
%| echo: false
%| output: true
clear
x = sym( "x", "real" );
target_fun(x) = real( x.^x );
domain = sym( [-1, 1] );
degree = 4;

L = PolynomialBasisFunction( "Lagrange", degree, x, domain );
nodes = transpose( linspace( domain(1), domain(2), degree + 1 ) );
l_coeffs = target_fun( nodes );

figure
hold on
fplot( target_fun, double( domain ), LineWidth=4, Color="k" )
xline( double( nodes ), LineStyle="-" )
scatter( nodes, target_fun( nodes ), MarkerFaceColor="k", MarkerEdgeColor="k" );
axis padded
ax = gca;
ax.XAxisLocation = "origin";
ax.YAxisLocation = "origin";

moments = int( L, domain );
PlotQuadrature( double( nodes ), double( moments ), double( l_coeffs ) )
```

```{matlab}
%| output: false
function [qp, weights] = LagrangeQuadrature( domain, num_qp, method )
    if num_qp == 1
        qp = mean( domain );
    else
        qp = transpose( linspace( domain(1), domain(2), num_qp ) );
    end
    x = sym( "x", "real" );
    basis = LagrangeBasis( num_qp - 1, x, domain );
    weights = int( basis, domain );
end
```

```{matlab}
%| output: false
function [qp, weights] = GetQuadratureScheme( domain, num_qp, method )
    if method == "Riemann"
        [qp, weights] = RiemannQuadrature( domain, num_qp );
    elseif method == "Lagrange"
        [qp, weights] = LagrangeQuadrature( domain, num_qp );
    end
end
```

```{matlab}
%| output: false
function val = Integrate( func, domain, num_qp, method )
    [qp, weights] = GetQuadratureScheme( domain, num_qp, method );
    val = 0;
    for ii = 1 : num_qp
        val = val + func( qp(ii) ) * weights(ii);
    end
end
```

But there is an issue with this approach of using quadrature derived from the Lagrange basis.
The same oscillatory Runge phenomena that we saw occur with higher-order Lagrange interpolations means that high-order Lagrange quadrature schemes also suffer.

```{matlab}
%| echo: false
%| output: true
clear
x = sym( "x", "real" );
target_fun(x) = real( x.^x );
domain = sym( [-1, 1] );
ref_int = int( target_fun, domain );
degree = 8;

L = PolynomialBasisFunction( "Lagrange", degree, x, domain );
nodes = transpose( linspace( domain(1), domain(2), degree + 1 ) );
l_coeffs = target_fun( nodes );

figure
hold on
fplot( target_fun, double( domain ), LineWidth=4, Color="k" )
fplot( transpose( l_coeffs ) * L, double( domain ), LineWidth=2, SeriesIndex=1, MeshDensity=20*degree )
scatter( nodes, target_fun( nodes ), MarkerFaceColor="k", MarkerEdgeColor="k" );
axis padded
ax(1) = gca;
ax(1).XAxisLocation = "origin";
ax(1).YAxisLocation = "origin";

N = 1 : 20;
int_vals = zeros( size( N ) );
for ii = 1 : length( N )
    I = Integrate( target_fun, domain, N(ii), "Lagrange" );
    int_vals(ii) = double( vpa( I , 16 ) );
end

figure
plot( N, abs( int_vals - ref_int ), LineWidth=2 )
ax(2) = gca;
ax(2).YScale = "log";
```

```{matlab}
%| output: false
function [qp, weights] = LagrangeLegendreQuadrature( domain, num_qp )
    x = sym( "x", "real" );
    if num_qp == 1
        qp = mean( domain );
    else
        P = LegendreBasis( num_qp, x, domain );
        C = CompanionMatrix( P(end) );
        P_roots = eig( C );
        [~, sidx] = sort( real( vpa( P_roots ) ) );
        P_roots = real( vpa( P_roots(sidx) ) );
        qp = P_roots;
        %qp = ChangeOfVariable( P_roots, [P_roots(1), P_roots(end)], domain );
    end
    basis = LagrangeLegendreBasis( num_qp - 1, x, domain );
    weights = int( basis, domain );
end
```

```{matlab}
%| output: false
function [qp, weights] = GetQuadratureScheme( domain, num_qp, method )
    if method == "Riemann"
        [qp, weights] = RiemannQuadrature( domain, num_qp );
    elseif method == "Lagrange"
        [qp, weights] = LagrangeQuadrature( domain, num_qp );
    elseif method == "Lagrange-Legendre"
        [qp, weights] = LagrangeLegendreQuadrature( domain, num_qp );
    end
end
```

```{matlab}
%| echo: false
%| output: true
clear
x = sym( "x", "real" );
target_fun(x) = real( x.^x );
domain = sym( [-1, 1] );
ref_int = int( target_fun, domain );
degree = 8;

L = PolynomialBasisFunction( "Lagrange-Legendre", degree, x, domain );
P = LegendreBasis( degree + 1, x, domain );
C = CompanionMatrix( P(end) );
P_roots = eig( C );
[~, sidx] = sort( real( vpa( P_roots ) ) );
P_roots = real( vpa( P_roots(sidx) ) );
nodes = P_roots; %ChangeOfVariable( P_roots, [P_roots(1), P_roots(end)], domain );
l_coeffs = target_fun( nodes );

figure
hold on
fplot( target_fun, double( domain ), LineWidth=4, Color="k" )
fplot( transpose( l_coeffs ) * L, double( domain ), LineWidth=2, SeriesIndex=1, MeshDensity=20*degree )
scatter( nodes, target_fun( nodes ), MarkerFaceColor="k", MarkerEdgeColor="k" );
axis padded
ax(1) = gca;
ax(1).XAxisLocation = "origin";
ax(1).YAxisLocation = "origin";

N = 1 : 20;
int_vals = zeros( size( N ) );
for ii = 1 : length( N )
    I = Integrate( target_fun, domain, N(ii), "Lagrange-Legendre" );
    int_vals(ii) = double( vpa( I , 16 ) );
end

figure
plot( N, abs( int_vals - ref_int ), LineWidth=2 )
ax(2) = gca;
ax(2).YScale = "log";
```